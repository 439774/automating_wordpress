---
  - name: Setting up ansible_server
    hosts: localhost
    connection: local
    vars:  #just incase ignore these # "main_pc" "laptop" are optional they are used to input the id_rsa.pub into authorized keys
      token: paste_token_here
      ip_v4_pub: "{{ (my_droplet.data.droplet.networks.v4 | selectattr('type', 'equalto', 'public')).0.ip_address | default('<none>', true) }}"
      ip_v4_private: "{{ (my_droplet.data.droplet.networks.v4 | selectattr('type', 'equalto', 'private')).0.ip_address | default('<none>', true) }}"
      main_pc: paste_id_rsa.pub_here
      laptop: paste_id_rsa.pub_here
      packages_yum: ["yum"]
      packages: ["vim", "curl", "wget", "git"]
    tasks:
      - name: Make sure we have a 'ansible' group
        group:
          name: ansible
          state: present

      - name: Allow 'ansible' group to have passwordless sudo
        lineinfile:
          dest: /etc/sudoers
          state: present
          regexp: '^%ansible'
          line: '%ansible ALL=(ALL) NOPASSWD: ALL'
          validate: 'visudo -cf %s'

      - name: Add the user 'ansible' with a bash shell, Generate SSH key for user 'ansible'
        user:
          name: ansible
          shell: /bin/bash
          group: ansible
          generate_ssh_key: yes
          ssh_key_bits: 2048
          ssh_key_comment: ansible@ansible-server

      - name: Make "authorized_keys" with the correct permissions
        blockinfile: 
          path: /home/ansible/.ssh/authorized_keys 
          create: yes
          owner: ansible
          group: ansible
          mode: u+rw,g-rwx,o-rwx
          block: |
            {{ main_pc }}
            {{ laptop }}
      
      - name: "Read a file content and print on terminal"
        shell: "cat /home/ansible/.ssh/id_rsa.pub"
        register: output
      - debug: var=output.stdout_lines

      - name: "Create ssh key using the output of the script above"
        digital_ocean_sshkey:
          oauth_token: "{{ token }}"
          name: "ansible_user_ssh_pub_key"
          ssh_pub_key: "{{ output.stdout }}"
          state: present
        register: info

      - debug:
          msg: "{{ info.data.ssh_key.id }}"

      - name: Creating webserver droplet
        community.digitalocean.digital_ocean_droplet:
          state: present
          name: webserver
          oauth_token: "{{ token }}"
          ssh_keys: "{{ info.data.ssh_key.id }}"
          size: s-1vcpu-1gb
          region: nyc1
          image: centos-stream-8-x64
          project: "Ansible"
          wait_timeout: 200
        register: my_droplet

      - name: printing 
        ansible.builtin.debug: 
          msg: |
            {{ my_droplet.data.droplet.id }}
            {{ (my_droplet.data.droplet.networks.v4 | selectattr('type', 'equalto', 'public')).0.ip_address | default('<none>', true) }}
            {{ (my_droplet.data.droplet.networks.v4 | selectattr('type', 'equalto', 'private')).0.ip_address | default('<none>', true) }}

      - shell: |
          whoami
          cd
          pwd
          mkdir /home/ansible/wordpress && touch /home/ansible/wordpress/inventory.yaml
          touch /home/ansible/wordpress/ping.yaml
          touch /home/ansible/wordpress/add_user.yaml
          touch /home/ansible/wordpress/packages.yaml
          touch /home/ansible/wordpress/apache.yaml
          ls -l
        register: checkpoint
      
      - name: checking if things are running smoothly
        ansible.builtin.debug: 
          msg: "{{ checkpoint.stdout_lines }}"
      
      - blockinfile: 
          path: /home/ansible/wordpress/inventory.yaml
          block: |
            ---
              all: # all_target_servers
                hosts:
                children:
                  dev: # group_name
                    hosts:
                      webserver: # hostname
                        ansible_host: {{ (my_droplet.data.droplet.networks.v4 | selectattr('type', 'equalto', 'private')).0.ip_address | default('<none>', true) }}

      - blockinfile: 
          path: /home/ansible/wordpress/ping.yaml
          block: |
            ---
              - name: Setting up ansible_server
                become: yes
                hosts: all
                tasks:
                  - name: Ping
                    ping:
                     
      - blockinfile: 
          path: /home/ansible/wordpress/add_user.yaml
          block: |
            ---
              - name: adding user ansible into webserver/databse
                hosts: all
                become: yes
                tasks:
                  - name: make sure group ansible is present
                    group: 
                      name: ansible
                      state: present

                  - name: Allow 'ansible' group to have passwordless sudo
                    lineinfile:
                      dest: /etc/sudoers
                      state: present
                      regexp: '^%ansible'
                      line: '%ansible ALL=(ALL) NOPASSWD: ALL'
                      validate: 'visudo -cf %s'

                  - name: adding user ansible into webserver
                    user:
                      name: ansible
                      shell: /bin/bash
                      group: ansible

                  - blockinfile: 
                      path: /home/ansible/.ssh/authorized_keys 
                      create: yes
                      owner: ansible
                      group: ansible
                      mode: u+rw,g-rwx,o-rwx
                      block: |
                        {{ output.stdout }}

      - blockinfile: 
          path: /home/ansible/wordpress/packages.yaml
          block: |
            ---
              - name: Setting up ansible_server
                hosts: all
                become: yes
                tasks:
                  - name: updating all packages
                    when: ansible_os_family == "RedHat"
                    dnf:
                      name: "*"
                      state: latest
                  - name: installing vim,curl,wget,git
                    when: ansible_os_family == "RedHat"
                    dnf: 
                      name: {{ packages }}
                      state: present
                  - name: fixing broken packages
                    when: ansible_facts["pkg_mgr"] == "apt"
                    apt:
                      name: "*"
                      state: fixed
                  - name: Update Packages on database
                    when: ansible_facts["pkg_mgr"] == "apt"
                    apt:
                      name: "*"
                      state: latest
                  - name: installing vim,curl,wget,git for databse
                    when: ansible_pkg_mgr == "apt"
                    apt:
                      name: {{ packages }}
                      state: present

      - blockinfile: 
          path: /home/ansible/wordpress/apache.yaml
          block: |
            ---
              - name: Setting up ansible_server
                hosts: webserver
                become: yes
                tasks:
                  - name: installing apache
                    dnf:
                      name: httpd
                      state: present
                  - name: starting and enabling apache
                    service:
                      name: httpd
                      state: started
                      enabled: yes
                  - name: starting and enabling apache
                    service:

      - name: Creating database droplet
        community.digitalocean.digital_ocean_droplet:
          state: present
          name: database
          oauth_token: "{{ token }}"
          ssh_keys: "{{ info.data.ssh_key.id }}"
          size: s-1vcpu-1gb
          region: nyc1
          image: ubuntu-20-04-x64
          project: "Ansible"
          wait_timeout: 400
        register: my_ubuntu

      - name: printing 
        ansible.builtin.debug: 
          msg: |
            {{ my_ubuntu.data.droplet.id }}
            {{ (my_ubuntu.data.droplet.networks.v4 | selectattr('type', 'equalto', 'public')).0.ip_address | default('<none>', true) }}
            {{ (my_ubuntu.data.droplet.networks.v4 | selectattr('type', 'equalto', 'private')).0.ip_address | default('<none>', true) }}

      - blockinfile: #updating file
          path: /home/ansible/wordpress/inventory.yaml
          block: |
            ---
              all: # all_target_servers
                hosts:
                children:
                  dev: # group_name
                    hosts:
                      webserver: # hostname
                        ansible_host: {{ (my_droplet.data.droplet.networks.v4 | selectattr('type', 'equalto', 'private')).0.ip_address | default('<none>', true) }}
                      database: # hostname
                        ansible_host: {{ (my_ubuntu.data.droplet.networks.v4 | selectattr('type', 'equalto', 'private')).0.ip_address | default('<none>', true) }}

      - blockinfile: #updating file
          path: /etc/ansible/ansible.cfg
          block: |
            [defaults]
            host_key_checking = False

      - become: yes
        become_user: ansible
        become_method: sudo
        ignore_errors: true
        shell: |
          cd /home/ansible/wordpress/
          ls -l
          whoami
          pwd
          ansible-playbook -i inventory.yaml add_user.yaml -u root
          ansible all -i inventory.yaml -m ping
          ansible-playbook -i inventory.yaml apache.yaml
          whoami
          ansible webserver -i inventory.yaml -a "systemctl status httpd"
          ansible-playbook -i inventory.yaml packages.yaml

        register: checking

      - name: checking if things are running smoothly
        ansible.builtin.debug: 
          msg: "{{ checking.stdout_lines }}"
